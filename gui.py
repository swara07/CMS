# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage
import cv2,imutils
import PyQt5.QtWidgets
import os
import PIL
from PIL import Image




class Ui_MainWindow(object):
    filename=''
    saving_dir=''
    opening_dir=''
    main_image=''
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1605, 916)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.opendir = QtWidgets.QPushButton(self.centralwidget)
        self.opendir.setGeometry(QtCore.QRect(40, 20, 151, 51))
        self.opendir.setObjectName("opendir")
        self.loadimage = QtWidgets.QPushButton(self.centralwidget)
        self.loadimage.setGeometry(QtCore.QRect(40, 110, 151, 51))
        self.loadimage.setObjectName("loadimage")
        self.savedir = QtWidgets.QPushButton(self.centralwidget)
        self.savedir.setGeometry(QtCore.QRect(40, 200, 151, 51))
        self.savedir.setObjectName("savedir")
        self.save = QtWidgets.QPushButton(self.centralwidget)
        self.save.setGeometry(QtCore.QRect(40, 290, 151, 51))
        self.save.setObjectName("save")
        self.predict = QtWidgets.QPushButton(self.centralwidget)
        self.predict.setGeometry(QtCore.QRect(40, 380, 151, 51))
        self.predict.setObjectName("predict")
        self.predictall = QtWidgets.QPushButton(self.centralwidget)
        self.predictall.setGeometry(QtCore.QRect(40, 470, 151, 51))
        self.predictall.setObjectName("predictall")
        self.nextimage = QtWidgets.QPushButton(self.centralwidget)
        self.nextimage.setGeometry(QtCore.QRect(40, 650, 151, 51))
        self.nextimage.setObjectName("nextimage")
        self.image = QtWidgets.QLabel(self.centralwidget)
        self.image.setGeometry(QtCore.QRect(230, 10, 1331, 881))
        self.image.setText("")
        
        self.image.setScaledContents(False)
        self.image.setObjectName("image")
        self.preimage = QtWidgets.QPushButton(self.centralwidget)
        self.preimage.setGeometry(QtCore.QRect(40, 560, 151, 51))
        self.preimage.setObjectName("preimage")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1605, 20))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.dirIterator = None
        self.fileList = []
        self.tmp=None
        



        self.opendir.clicked.connect(self.open_dir)
        self.loadimage.clicked.connect(self.load_image)
        self.savedir.clicked.connect(self.save_dir)
        self.save.clicked.connect(self.save_image)
        # self.preimage.clicked.connect(self.pre_image)
        self.nextimage.clicked.connect(self.next_image)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CMS Experiment"))
        self.opendir.setText(_translate("MainWindow", "OPEN DIR"))
        self.loadimage.setText(_translate("MainWindow", "LOAD IMAGE"))
        self.savedir.setText(_translate("MainWindow", "SAVE DIR"))
        self.save.setText(_translate("MainWindow", "SAVE IMAGE"))
        self.predict.setText(_translate("MainWindow", "PREDICT"))
        self.predictall.setText(_translate("MainWindow", "PREDICT ALL"))
        self.nextimage.setText(_translate("MainWindow", "NEXT IMAGE"))
        self.preimage.setText(_translate("MainWindow", "PREVIOUS IMAGE"))

    

    def load_image(self):
        global filename
        global main_image
        filename= QFileDialog.getOpenFileName(filter="Image (*.*)")[0]
        textcv=os.path.basename(filename)
        print(textcv)
        main_image=cv2.imread(filename)
        main_image=cv2.putText(main_image,textcv,(10,50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA)
        self.tmp=main_image
        frame=cv2.cvtColor(main_image,cv2.COLOR_BGR2RGB)
        image=QImage(frame,frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format_RGB888)
    
        if filename:
            pixmap = QtGui.QPixmap(image).scaled(self.image.size(), 
                    QtCore.Qt.KeepAspectRatio)
            if pixmap.isNull():
                return
            self.image.setPixmap(pixmap)
            

    def load_imagetext(self):
        global filename
        global main_image
        textcv=os.path.basename(filename)
        print("text on file----------------"+textcv)
        main_image=cv2.imread(filename)
        main_image=cv2.putText(main_image,textcv,(10,50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA)
        self.tmp=main_image
        frame=cv2.cvtColor(main_image,cv2.COLOR_BGR2RGB)
        image=QImage(frame,frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format_RGB888)
        if filename:
            pixmap = QtGui.QPixmap(image).scaled(self.image.size(), 
                    QtCore.Qt.KeepAspectRatio)
            if pixmap.isNull():
                return
            self.image.setPixmap(pixmap)
        
    
    def next_image(self):
        global filename
        if self.fileList:
            try:
                filename = next(self.dirIterator)
                pixmap = QtGui.QPixmap(filename).scaled(self.image.size(), 
                    QtCore.Qt.KeepAspectRatio)
                if pixmap.isNull():
                    self.fileList.remove(filename)
                    self.next_image()
                else:
                    self.load_imagetext()
            except:
                self.dirIterator = iter(self.fileList)
                self.next_image()
        else:
            self.load_image()


    def save_image(self):
        global filename
        global main_image
        fn = QFileDialog.getSaveFileName(filter="JPG(*.jpg);;PNG(*.png);;TIFF(*.tiff);;BMP(*.bmp)")[0]
        print(fn)
        print(filename)
        cv2.imwrite(fn,self.tmp)
        print('Image saved as:',fn)


    def save_dir(self):
        global saving_dir
        saving_dir = QFileDialog.getExistingDirectory(None, 'Select a folder:', '', QFileDialog.ShowDirsOnly)
        if saving_dir=='':
            return
        print(saving_dir)


    def open_dir(self):

        global filename
        global opening_dir
        opening_dir = QFileDialog.getExistingDirectory(None, 'Select a folder:', '', QFileDialog.ShowDirsOnly)
        if opening_dir=='':
            return
        print("opening dir -----------:"+opening_dir)
        self.fileList = []
        for f in os.listdir(opening_dir):
            fpath = os.path.join(opening_dir, f)
            if os.path.isfile(fpath) and f.endswith(('.png', '.jpg', '.jpeg','.bmp')):
                self.fileList.append(fpath)
        self.fileList.sort()
        self.dirIterator = iter(self.fileList)
        print(self.fileList)
        filename=self.fileList[0]
        self.load_imagetext()





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
